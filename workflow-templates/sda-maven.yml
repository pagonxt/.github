name: Maven CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types:
      - created

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: simple-service
  ANCHORE: true
  # TODO: Uncomment that you need
  ##### AKS #####
  # CLOUD: aks
  # TODO: Uncomment and insert your data to deploy in azure
  #AKS_RESOURCE_GROUP: insert-resource-group
  #AKS_CLUSTER_NAME: insert-cluster-name
  #AKS_NAMESPACE: insert-namespace
  
  ##### EKS #####
  # CLOUD: eks
  
jobs:
  build:
    runs-on: ubuntu-latest
    name: Build Maven project
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2.1.1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 8
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - name: Build and test project
      run: mvn -B --file pom.xml clean verify
    - uses: ashley-taylor/junit-report-annotations-action@master
      with:
        access-token: ${{ secrets.GITHUB_TOKEN }}
      if: always()
    - id: getfilename
      run: echo "::set-output name=file::$(ls build/*.jar)"
    - name: Upload Maven build artifact
      uses: actions/upload-artifact@v2.1.4
      with:
        name: artifact
        path: target/${{ steps.getfilename.outputs.file }}

  docker:
    needs: [build]
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.push_image.outputs.tag }}
      image_id: ${{ steps.push_image.outputs.image_id }}
    steps:
      - uses: actions/checkout@v2
      - name: Download Maven build artifact
        uses: actions/download-artifact@v2.0.5
        with:
          name: artifact
          path: artifact

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag  ${{ github.repository }}/$IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - uses: anchore/scan-action@v2
        if: env.ANCHORE == 'true'
        with:
          image: ${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
          fail-build: false
          acs-report-enable: true
          debug: true
          #acs-report-severity-cutoff: "Medium"

      - name: anchore inline scan JSON results
        if: env.ANCHORE == 'true'
        run: for j in `ls ./anchore-reports/*.json`; do echo "---- ${j} ----"; cat ${j}; echo; done

      - name: anchore action SARIF report
        if: env.ANCHORE == 'true'
        run: cat results.sarif

      - name: upload Anchore scan SARIF report
        if: env.ANCHORE == 'true'
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif

      - name: Upload Anchore reports
        if: env.ANCHORE == 'true'
        uses: actions/upload-artifact@v2.1.4
        with:
          name: anchore-reports
          path: ./anchore-reports

      - id: push_image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          echo IMAGE_NAME=$IMAGE_NAME

          export IMAGE_NAME=$IMAGE_NAME
          export IMAGE_ID=$IMAGE_ID
          export VERSION=$VERSION

          docker tag ${{ github.repository }}/$IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          echo "::set-output name=tag::$VERSION"
          echo "::set-output name=image_id::$IMAGE_ID"

  aks-deploy:
    needs: [docker]
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/azure-cli

    steps:
      - name: install kubectl
        if: env.CLOUD == 'aks'
        run: |
          curl https://storage.googleapis.com/kubernetes-release/release/v$KUBERNETES_VERSION/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl
          chmod +x /usr/local/bin/kubectl
        env:
          KUBERNETES_VERSION: 1.17.9

      - uses: Azure/aks-set-context@v1
        if: env.CLOUD == 'aks'
        with:
            creds: '${{ secrets.AZURE_CREDENTIALS }}' # Azure credentials
            resource-group: '${{ env.AKS_RESOURCE_GROUP }}'
            cluster-name: '${{ env.AKS_CLUSTER_NAME }}'
        id: login

      - uses: Azure/k8s-deploy@v1.2
        if: env.CLOUD == 'aks'
        with:
          namespace: '${{ env.AKS_NAMESPACE }}'
          images: ${{ github.repository }}/${{ needs.docker.outputs.image_id }}:${{ needs.docker.outputs.docker_tag }}
          force: true
          manifests: |
             deployment.yaml
